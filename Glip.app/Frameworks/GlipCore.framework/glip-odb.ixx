// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // Model
  //

  inline
  access::object_traits< ::glip_mobile::Model >::id_type
  access::object_traits< ::glip_mobile::Model >::
  id (const object_type& o)
  {
    return o.id ();
  }

  // PersonCount
  //

  inline
  void access::view_traits< ::glip_mobile::PersonCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Person
  //

  inline
  access::object_traits< ::glip_mobile::Person >::id_type
  access::object_traits< ::glip_mobile::Person >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Person >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Person >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // CompanyCount
  //

  inline
  void access::view_traits< ::glip_mobile::CompanyCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Company
  //

  inline
  access::object_traits< ::glip_mobile::Company >::id_type
  access::object_traits< ::glip_mobile::Company >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Company >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Company >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ItemCount
  //

  inline
  void access::view_traits< ::glip_mobile::ItemCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Item
  //

  inline
  access::object_traits< ::glip_mobile::Item >::id_type
  access::object_traits< ::glip_mobile::Item >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Item >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Item >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // PostCount
  //

  inline
  void access::view_traits< ::glip_mobile::PostCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Post
  //

  inline
  access::object_traits< ::glip_mobile::Post >::id_type
  access::object_traits< ::glip_mobile::Post >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Post >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Post >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // GroupCount
  //

  inline
  void access::view_traits< ::glip_mobile::GroupCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AllGroupUnReadCount
  //

  inline
  void access::view_traits< ::glip_mobile::AllGroupUnReadCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Group
  //

  inline
  access::object_traits< ::glip_mobile::Group >::id_type
  access::object_traits< ::glip_mobile::Group >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Group >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Group >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // FileVersionCount
  //

  inline
  void access::view_traits< ::glip_mobile::FileVersionCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // FileVersion
  //

  inline
  access::object_traits< ::glip_mobile::FileVersion >::id_type
  access::object_traits< ::glip_mobile::FileVersion >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::FileVersion >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::FileVersion >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // CallCount
  //

  inline
  void access::view_traits< ::glip_mobile::CallCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Call
  //

  inline
  access::object_traits< ::glip_mobile::Call >::id_type
  access::object_traits< ::glip_mobile::Call >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Call >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Call >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // CodeCount
  //

  inline
  void access::view_traits< ::glip_mobile::CodeCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Code
  //

  inline
  access::object_traits< ::glip_mobile::Code >::id_type
  access::object_traits< ::glip_mobile::Code >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Code >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Code >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ConferenceCount
  //

  inline
  void access::view_traits< ::glip_mobile::ConferenceCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Conference
  //

  inline
  access::object_traits< ::glip_mobile::Conference >::id_type
  access::object_traits< ::glip_mobile::Conference >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Conference >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Conference >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ItemReminderCount
  //

  inline
  void access::view_traits< ::glip_mobile::ItemReminderCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ItemReminder
  //

  inline
  access::object_traits< ::glip_mobile::ItemReminder >::id_type
  access::object_traits< ::glip_mobile::ItemReminder >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::ItemReminder >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::ItemReminder >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // EventCount
  //

  inline
  void access::view_traits< ::glip_mobile::EventCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Event
  //

  inline
  access::object_traits< ::glip_mobile::Event >::id_type
  access::object_traits< ::glip_mobile::Event >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Event >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Event >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // FileCount
  //

  inline
  void access::view_traits< ::glip_mobile::FileCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // File
  //

  inline
  access::object_traits< ::glip_mobile::File >::id_type
  access::object_traits< ::glip_mobile::File >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::File >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::File >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // IntegrationCount
  //

  inline
  void access::view_traits< ::glip_mobile::IntegrationCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Integration
  //

  inline
  access::object_traits< ::glip_mobile::Integration >::id_type
  access::object_traits< ::glip_mobile::Integration >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Integration >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Integration >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // LinkCount
  //

  inline
  void access::view_traits< ::glip_mobile::LinkCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Link
  //

  inline
  access::object_traits< ::glip_mobile::Link >::id_type
  access::object_traits< ::glip_mobile::Link >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Link >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Link >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MeetingCount
  //

  inline
  void access::view_traits< ::glip_mobile::MeetingCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Meeting
  //

  inline
  access::object_traits< ::glip_mobile::Meeting >::id_type
  access::object_traits< ::glip_mobile::Meeting >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Meeting >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Meeting >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // PageCount
  //

  inline
  void access::view_traits< ::glip_mobile::PageCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Page
  //

  inline
  access::object_traits< ::glip_mobile::Page >::id_type
  access::object_traits< ::glip_mobile::Page >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Page >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Page >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // PollCount
  //

  inline
  void access::view_traits< ::glip_mobile::PollCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Poll
  //

  inline
  access::object_traits< ::glip_mobile::Poll >::id_type
  access::object_traits< ::glip_mobile::Poll >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Poll >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Poll >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // QuestionCount
  //

  inline
  void access::view_traits< ::glip_mobile::QuestionCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Question
  //

  inline
  access::object_traits< ::glip_mobile::Question >::id_type
  access::object_traits< ::glip_mobile::Question >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Question >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Question >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TaskCount
  //

  inline
  void access::view_traits< ::glip_mobile::TaskCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Task
  //

  inline
  access::object_traits< ::glip_mobile::Task >::id_type
  access::object_traits< ::glip_mobile::Task >::
  id (const object_type& o)
  {
    return object_traits< ::glip_mobile::Model >::id (o);
  }

  inline
  void access::object_traits< ::glip_mobile::Task >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::Task >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ModelJSONRepresentation
  //

  inline
  access::object_traits< ::glip_mobile::ModelJSONRepresentation >::id_type
  access::object_traits< ::glip_mobile::ModelJSONRepresentation >::
  id (const object_type& o)
  {
    return o.m_id;
  }

  inline
  void access::object_traits< ::glip_mobile::ModelJSONRepresentation >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::glip_mobile::ModelJSONRepresentation >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

#include <odb/details/unique-ptr.hxx>

namespace odb
{
  // Model
  //

  // PersonCount
  //

  // Person
  //

  inline
  access::object_traits_impl< ::glip_mobile::Person, id_sqlite >::id_type
  access::object_traits_impl< ::glip_mobile::Person, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::glip_mobile::Model, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Person, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Person, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Person, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Person, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // CompanyCount
  //

  // Company
  //

  inline
  access::object_traits_impl< ::glip_mobile::Company, id_sqlite >::id_type
  access::object_traits_impl< ::glip_mobile::Company, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::glip_mobile::Model, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Company, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Company, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Company, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // ItemCount
  //

  // Item
  //

  inline
  access::object_traits_impl< ::glip_mobile::Item, id_sqlite >::id_type
  access::object_traits_impl< ::glip_mobile::Item, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::glip_mobile::Model, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Item, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Item, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  // PostCount
  //

  // Post
  //

  inline
  access::object_traits_impl< ::glip_mobile::Post, id_sqlite >::id_type
  access::object_traits_impl< ::glip_mobile::Post, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::glip_mobile::Model, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Post, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Post, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Post, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // GroupCount
  //

  // AllGroupUnReadCount
  //

  // Group
  //

  inline
  access::object_traits_impl< ::glip_mobile::Group, id_sqlite >::id_type
  access::object_traits_impl< ::glip_mobile::Group, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::glip_mobile::Model, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Group, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Group, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Group, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // FileVersionCount
  //

  // FileVersion
  //

  inline
  access::object_traits_impl< ::glip_mobile::FileVersion, id_sqlite >::id_type
  access::object_traits_impl< ::glip_mobile::FileVersion, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::glip_mobile::Model, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::FileVersion, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::FileVersion, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::FileVersion, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::FileVersion, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // CallCount
  //

  // Call
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Call, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Call, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Call, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Call, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // CodeCount
  //

  // Code
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Code, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Code, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Code, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Code, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // ConferenceCount
  //

  // Conference
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Conference, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Conference, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Conference, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Conference, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // ItemReminderCount
  //

  // ItemReminder
  //

  inline
  void access::object_traits_impl< ::glip_mobile::ItemReminder, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::ItemReminder, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::ItemReminder, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::ItemReminder, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // EventCount
  //

  // Event
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Event, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Event, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Event, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Event, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // FileCount
  //

  // File
  //

  inline
  void access::object_traits_impl< ::glip_mobile::File, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::File, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::File, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::File, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // IntegrationCount
  //

  // Integration
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Integration, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Integration, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Integration, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Integration, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // LinkCount
  //

  // Link
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Link, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Link, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Link, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Link, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // MeetingCount
  //

  // Meeting
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Meeting, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Meeting, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Meeting, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Meeting, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // PageCount
  //

  // Page
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Page, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Page, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Page, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Page, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // PollCount
  //

  // Poll
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Poll, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Poll, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Poll, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Poll, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // QuestionCount
  //

  // Question
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Question, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Question, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Question, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Question, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    b[0UL].version++;
    b[1UL].version++;
  }

  // TaskCount
  //

  // Task
  //

  inline
  void access::object_traits_impl< ::glip_mobile::Task, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Task, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::glip_mobile::Model, id_sqlite >::init (i, id);
  }

  inline
  bool access::object_traits_impl< ::glip_mobile::Task, id_sqlite >::
  check_version (const std::size_t* v, const image_type& i)
  {
    return 
      v[0UL] != i.version ||
      v[1UL] != i.base->version ||
      v[2UL] != i.base->base->version;
  }

  inline
  void access::object_traits_impl< ::glip_mobile::Task, id_sqlite >::
  update_version (std::size_t* v, const image_type& i, sqlite::binding* b)
  {
    v[0UL] = i.version;
    v[1UL] = i.base->version;
    v[2UL] = i.base->base->version;
    b[0UL].version++;
    b[1UL].version++;
    b[2UL].version++;
  }

  // ModelJSONRepresentation
  //

  inline
  void access::object_traits_impl< ::glip_mobile::ModelJSONRepresentation, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::glip_mobile::ModelJSONRepresentation, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }
}

